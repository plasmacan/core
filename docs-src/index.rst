core
======================================

This documentation was automatically generated by Sphinx, validated by pytest, and
published by GitHub actions. This repo is a demo of, and template for, the various cutting-edge automation
technologies available to git users. It offers a springboard for new projects.


Features
=============

In this repo, the actual "code" is ``/src`` the rest of the files are boilerplate to facilitate whatever
the project ultimately becomes. The following features are fully configured and will work out-of-the gate:

* For all source files:
    - Any trailing whitespace is removed
    - CRLF line breaks are converted to LF
    - Any byte-order-marker is removed
    - The file is made to end in a single new line `rationale`_
    - Typos are automatically fixed with `codespell`_


* For Python source files:
    - Unused variables and unused imports are automatically removed by `autoflake`_.
    - Imports are automatically sorted by `isort`_
    - Comments, strings, and docstrings are checked with `aspell`_
    - Code is automatically formatted by `black`_
    - Code is checked for security vulnerabilities with `bandit`_, `CodeQL`_, and `safety`_
    - Code is linted and validated with `pylint`_, `flake8`_, `flake8-pytest-style`_, `flake8-bugbear`_,
      `flake8-comprehensions`_, `flake8-print`_, `flake8-pytest-style`_, and `darglint`_



* For CSS source files:
    - Code is automatically formatted by `prettier`_

    - Code is spellchecked by `cspell`_

    - Code is linted by `stylelint`_ using `stylelint-config-standard`_

* For javascript source files:
    - Code is automatically formatted by `prettier`_
    - Code is spellchecked by `cspell`_
    - Code is linted by `eslint`_


* For html source files:
    - Code is automatically formatted by `prettier`_
    - Code is spellchecked by `cspell`_
    - Code is validated by the `v.Nu validator`_

* For JSON and YAML:
    - File is automatically formatted by `prettier`_
    - File is validated for correctness

* For markdown:
    - File is automatically formatted by `prettier`_
    - File is linted by `markdownlint`_


* For reStructuredText:
    - File is linted by `restructuredtext-lint`_


* For `sphinx-doc`_:
    - File is linted by `doc8`_

Most of these tests are performed as a pre-commit hook as well as in CI. If the CI has to make corrections, (such as
reformatting) it will automatically do so and commit to the branch. The CI also performs `pytest`_ tests, builds the
documentation, and reports the test coverage and code quality (using `coverage.py`_ and `pytest`_). The CI will
automatically update the badges in the readme.md to reflect the actual code-quality and coverage.



Initial Setup
================

There are 4 main steps to using this repo:

1) Use the template
2) Enable the actions
3) Protect the branch
4) Set up locally

They are detailed in full under :ref:`Getting Started <general/getting-started:Getting Started with core>`

Contributing
=============

Pull requests welcome.

.. _sphinx-doc: (https://github.com/sphinx-doc/sphinx)
.. _coverage.py: https://github.com/nedbat/coveragepy
.. _pytest: https://github.com/pytest-dev/pytest
.. _black: https://github.com/psf/black
.. _isort: https://github.com/pycqa/isort
.. _autoflake: https://github.com/myint/autoflake
.. _aspell: https://github.com/GNUAspell/aspell
.. _bandit: https://github.com/PyCQA/bandit
.. _CodeQL: https://codeql.github.com/
.. _safety: https://github.com/pyupio/safety
.. _pylint: https://github.com/PyCQA/pylint
.. _flake8: https://github.com/PyCQA/flake8
.. _flake8-pytest-style: https://github.com/m-burst/flake8-pytest-style
.. _flake8-bugbear: https://github.com/PyCQA/flake8-bugbear
.. _flake8-comprehensions: https://github.com/adamchainz/flake8-comprehensions
.. _flake8-print: https://github.com/JBKahn/flake8-print
.. _darglint: https://github.com/terrencepreilly/darglint
.. _stylelint: https://github.com/stylelint/stylelint) using
.. _stylelint-config-standard: https://github.com/stylelint/stylelint-config-standard)
.. _eslint: https://github.com/eslint/eslint)
.. _cspell: https://github.com/streetsidesoftware/cspell)
.. _v.Nu validator: https://validator.w3.org/)
.. _prettier: https://github.com/prettier/prettier)
.. _markdownlint: https://github.com/markdownlint/markdownlint)
.. _restructuredtext-lint: https://github.com/twolfson/restructuredtext-lint)
.. _doc8: https://github.com/PyCQA/doc8)
.. _codespell: https://github.com/codespell-project/codespell
.. _rationale: https://stackoverflow.com/a/39331480/3238695
